#lang rhombus/static/and_meta

import:
  lib("racket/base.rkt") as rkt:
    expose: #{time-apply}
    rename: #{time-apply} as rkt_time
  "rrbtree.rhm": expose Catvec
  "rbtree.rhm": expose Vector
  rhombus/measure
  "utils.rhm" open
  "cow_array.rhm" open
  rhombus/runtime

class TimeBenchmark(cpu, real, gc, ~exn = #false):
  private implements Printable

  constructor
  | (): super(#nan, #nan, #nan, #true)
  | (cpu, real, gc): super(cpu, real, gc)
  | (~exn): super(#nan, #nan, #nan, ~exn: exn)

  private override describe(mode, recur):
    "~cpu: " +& cpu +& ", ~real: " +& real +& ", ~gc: " +& gc

  method serialize():
    [cpu, real, gc]
  

fun time(f, args) :~ TimeBenchmark:
  let (_, cpu, real, gc) = rkt_time(f, args)
  TimeBenchmark(cpu, real, gc)


interface AList:
  extends Indexable // .get and [] access
  extends Sequenceable // .to_sequence
  extends Appendable // ++ and .append

 // def EMPTY :: AList

  method length() :: Int
  method set(index :: Int, el) :: AList
  method cons(el) :: AList
  method snoc(el) :: AList
  method add(el) :: AList
  method pop() :: AList
  method take(pos :: Int) :: AList
  method drop(pos :: Int) :: AList
  method sublist(start :: Int, end :: Int) :: AList


defn.macro 'enum $name:
                $(id :: Group)
                ...':
    def [n, ...] = List.iota([id, ...].length())
    'namespace $name:
       export all_defined

       def members: [$n, ...]
       def $id: $n
       ...'

/* sequence operations */
enum ops:
  construct
  cons
  snoc
  add
  get
  set
  pop
  take
  drop
  concat
  sublist
  control

/* known sequence types that could satisfy List annot */
enum types:
  list
  catvec
  rbvec
  map
  cow

def actions :: Map.of(Int, Map.of(Int, Function)) = {
  ops.construct: { types.list:
                     fun (t :~ Int): List.iota(t),
                   types.catvec:
                     fun (t :~ Int): Catvec.from(0..t),
                   types.rbvec:
                     fun (t :~ Int): Vector.from(0..t),
                   types.map:
                     fun (t :~ Int):
                       for Map:
                         each i: 0 .. t
                         values(i, i),
                   types.cow:
                     fun (t :~ Int): Cow.from(0..t)},
  ops.cons: { types.list:
                fun (t :~ List): List.cons(-1, t),
              types.catvec:
                fun(t :~ Catvec): t.insert(0, -1),
              types.rbvec:
                fun (t :~ Vector): Vector().add(-1) ++ t,
              types.map:
                fun (t :~ Map):
                  {0: -1} ++ for Map:
                    each (k, v): t
                    values(k + 1, v),
              types.cow:
                fun (t :~ Cow): cow_append(cow(-1), t)},
  ops.snoc: { types.list:
                fun (t :~ List): t ++ [-1],
              types.catvec:
                fun (t :~ Catvec): t.add(-1),
              types.rbvec:
                fun (t :~ Vector): t.add(-1),
              types.map:
                fun (t :~ Map): t ++ {t.length(): -1},
              types.cow:
                fun (t :~ Cow): cow_add(t, -1)},
  ops.add: { types.list: fun (t :~ List): List.cons(-1, t),
             types.catvec: fun (t :~ Catvec): t.add(-1),
             types.rbvec:  fun (t :~ Vector): t.add(-1),
             types.map: fun (t :~ Map): t ++ {t.length(): -1},
             types.cow: fun (t :~ Cow): cow_add(t, -1)},
  ops.get: { types.list: fun (t :~ List): t[t.length() div 2],
             types.catvec: fun (t :~ Catvec): t[t.length() div 2],
             types.rbvec: fun (t :~ Vector): t[t.length() div 2],
             types.map: fun (t :~ Map): t[t.length() div 2],
             types.cow: fun (t :~ Cow): t[t.length() div 2]},
  ops.set: { types.list:
               fun (t :~ List):
                 let idx = t.length() div 2
                 t.drop_right(t.length() - idx) ++ List.cons(-1, t.drop_left(idx + 1)),
             types.catvec:
               fun (t :~ Catvec): t.set(t.size div 2, -1),
             types.rbvec:
               fun (t :~ Vector):
                 let idx = t.length() div 2
                 t.take(idx - 1).add(-1) ++ t.drop(idx + 1),
             types.map:
               fun (t :~ Map): for Map:
                                 each:
                                   i: 0 .. t.length()
                                   (k, v): t
                                 if i == t.length() div 2
                                 | values(k, -1)
                                 | values(k, v),
             types.cow:
               fun (t :~ Cow): cow_set(t, t.length() div 2, -1)},
  ops.pop: { types.list: fun (t :~ List): t.drop_right(1),
             types.catvec: fun (t :~ Catvec): t.pop(),
             types.rbvec: fun (t :~ Vector): t.pop(),
             types.map: fun (t :~ Map): Map.remove(t, t.length() - 1),
             types.cow: fun (t :~ Cow): cow_take(t, t.length() - 1)},
  ops.take: { types.list: fun (t :~ List): t.drop_right(t.length() div 2 + 1),
              types.catvec: fun (t :~ Catvec): t.take(t.size div 2 - 1),
              types.rbvec: fun (t :~ Vector): t.take(t.size div 2 - 1),
              types.map: fun (t :~ Map):
                           for Map:
                             each:
                               (k, v): t
                               i: 0..(t.length() div 2) - 1
                             values(k, v),
              types.cow: fun (t :~ Cow):
                           cow_take(t, t.length() div 2 - 1)},
  ops.drop: { types.list: fun (t :~ List):
                            t.drop_left(t.length() div 2),
              types.catvec: fun (t :~ Catvec):
                              t.drop(t.size div 2),
              types.rbvec: fun (t :~ Vector):
                             t.drop(t.size div 2),
              types.map: fun (t :~ Map):
                           for Map (i: (t.length() div 2) .. t.length()):
                             values(i, t[i]),
              types.cow: fun (t :~ Cow):
                           cow_drop(t, t.length() div 2)},
  ops.concat: { types.list: fun (t :~ List): t ++ t,
                types.catvec: fun (t :~ Catvec): t ++ t,
                types.rbvec: fun (t :~ Vector): t ++ t,
                types.map: fun (t :~ Map): t ++ t,
                types.cow: fun (t :~ Cow):
                             cow_append(t, t)},
  ops.sublist: { // we'll do the middle third of the sequence i suppose
                 types.list: fun (t :~ List):
                               if t.length() < 10
                               | []
                               | t.drop_right(t.length() div 3).drop_left(t.length() div 3),
                 types.catvec: fun (t :~ Catvec):
                                 t.sublist(t.size div 3, t.size div 3),
                 types.rbvec:
                   fun (t :~ Vector):
                     t.drop(t.size div 3).take(t.length() - (t.length() div 3)),
                 types.map: fun (t :~ Map):
                              for Map (i: (t.length() div 3)..2*(t.length() div 3)):
                                values(i, t[i]),
                 types.cow: fun (t :~ Cow):
                              cow_take(t, t.length() - t.length())},
  ops.control: { types.list: id,
                 types.catvec: id,
                 types.rbvec: id,
                 types.map: id,
                 types.cow: id}}


def small_sizes = [1, 5, 10, 50, 100, 300, 500]
def sizes = [1, 5, 10, 50, 100, 300, 500, 1000, 10000]
def short_iters = 1000
def iters = 10000
def long_iters = 1000000

fun bench_construct(sizes_to_use :: List.of(Int), iters_to_use :: Int):
  // TODO gc before each?
  for List:
    each size: sizes_to_use
    each typ: types.members
    let result :~ TimeBenchmark = try:
      time(fun (sz):
             for (_: 0 .. iters_to_use):
               actions[ops.construct][typ](sz),
           [size])
      ~catch exn:
        println("ERROR w/ ctor: ")
        println(exn)
        TimeBenchmark(~exn: exn)
    [ops.construct, typ, result.cpu, result.real, result.gc, size, iters_to_use]

fun do_bench(operation :: Int, sizes_to_use :: List.of(Int), iters_to_use :: Int):
  // TODO gc before each?
  for List:
    each size: sizes_to_use
    each typ: types.members
    runtime.gc()
    let result :~ TimeBenchmark = try:
      time(fun (t):
             for (_: 0 .. iters_to_use):
               actions[operation][typ](t),
           [actions[ops.construct][typ](size)])
      ~catch _:
        try: // try one more time in case it was a fluke
          time(fun (t):
                 for (_: 0 .. iters_to_use):
                   actions[operation][typ](t),
               [actions[ops.construct][typ](size)])
          ~catch exn:
            TimeBenchmark(~exn: exn)
    [operation, typ, result.cpu, result.real, result.gc, size, iters_to_use]

// TODO: benchmark getting/setting repeatedly to show advantages of cache coherency?

fun record(name :: String, bench :: List.of(List)):
  println("benching " +& name +& "...")
  if_not name == "control":
    let o = r.#{open-output-file}("benchmarks/" +& name +& ".csv", ~exists: #'replace)
    // headers (note no spaces between header names or they'll end up in the header name literally)
    println("operation,structure type,cpu,real,gc,size,iterations", o)
    // data
    for (row : bench):
      print(row[0], o)
      for (val: row.rest):
        print(", " +& val, o)
      println("", o)

    r.#{close-output-port}(o)
  println("record done: " +& name)

record("control", do_bench(ops.control, sizes, long_iters))
record("small_ctor", bench_construct(small_sizes, iters))
record("ctor", bench_construct(sizes, short_iters))
record("cons", do_bench(ops.cons, sizes, short_iters))
record("snoc", do_bench(ops.snoc, sizes, iters))
record("add", do_bench(ops.add, sizes, long_iters))
record("concat", do_bench(ops.concat, sizes, short_iters))
record("get", do_bench(ops.get, sizes, iters))
record("set", do_bench(ops.set, sizes, iters))
record("pop", do_bench(ops.pop, sizes, iters))
record("take", do_bench(ops.take, sizes, iters))
record("drop", do_bench(ops.drop, sizes, iters))
record("sublist", do_bench(ops.sublist, sizes, iters))
