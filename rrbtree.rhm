#lang rhombus/static/and_meta

import "utils.rhm" open
import "cow_array.rhm" open


// comment out for fast
#//
import:
  rhombus.(::) as :~


/*
  (Rough) Roadmap:
  - tail
  - make rrbtree construction smarter
  - largescale real world use (shplait?)
*/
  
  
export:
  Catvec
  
def BITS = 5
def MAX_WIDTH = 32
def MASK = 31
def MAX_ERROR = 2

      
macro 'radix($index, $height)':
  '((($index) bits.(>>) (BITS * $height)) bits.and MASK)'

module test:
  for (i: 0 .. 32):
    check: radix(i, 0)
           ~is i
    check: radix(i, 1)
           ~is 0
  for (i: 32 .. 64):
    check: radix(i, 1)
           ~is 1
           
class Node(children :~ Cow.of(Node || Any) = cow(), sizes :~ maybe(Cow.of(Int)) = #false):
 /* a node in the RRB Tree

  - a node is fully dense if it has exactly `m` children where `m` is the branching factor of the overall Tree
    and each child is also fully dense
  - a node is leftwise dense if its first `n - 1` children, where `n` is its total number of children,
    are fully dense, and its `n`th child is leftwise-dense or fully dense. `n` is allowed to be < `m`
  - a node is balanced if it is leftwise dense or fully dense (note that leaves are always at least leftwise dense)
  - unbalanced nodes contain a size array `sizes`, balanced nodes do not
*/
  private implements Equatable
  private implements Sequenceable
  implements Indexable

  constructor
  | (): super()
  | (children :: Array):
      super(if !frozen(children)
            | unsafe.freeze(children.copy())
            | children)
  | (children :: Array, #false):
      super(if !frozen(children)
            | unsafe.freeze(children.copy())
            | children)
  | (children :: Array, sizes :: Array):
      super(if !frozen(children)
            | unsafe.freeze(children.copy())
            | children,
            if !frozen(sizes)
            | unsafe.freeze(sizes.copy())
            | sizes)

  property balanced:
    !sizes
    
  property size:
    children.length()

  property first:
    children[0]

  property last:
    children[children.length() - 1]


  private override equals(rhs :~ Node, recur):
    children.length() == rhs.children.length()
      && (for values(eq = #true):
            each i: 0 .. children.length()
            break_when !eq
            recur(children[i], rhs.children[i]))

  private override hash_code(recur):
    if children.length() == 0
    | 0
    | for values(hc = recur(children[0])):
        each i: 1 .. children.length()
        Equatable.hash_code_combine(hc, recur(children[i]))

  private override to_sequence():
    Sequence.make(~initial_position: 0,
                  ~continue_at_position: fun (i): i < this.size,
                  ~position_to_element: fun (i): this[i],
                  ~position_to_next: fun (i): i + 1)


  sequence '$lhs: $rhs':
    '(~outer_binds:
        p :~ Node = $rhs,
      ~recur_binds:
        pos = 0,
      ~head_guard:
        pos < p.size,
      ~inner_binds:
        $lhs = p[pos],
      ~recur_args:
        (pos + 1))'
    
  override get(index):
    children[index]

  method set(index, el) :~ Node:
    Node(cow_set(children, index, el), sizes)

  method length() :~ Int:
    children.length()



macro 'leaf($args)':
  'Node(cow($args))'

macro 'EMPTY_VEC': 'Catvec[]'
                    
class Catvec(root :~ Node,
             size :~ NonnegInt,
             height :~ NonnegInt):
  implements Indexable
  private implements Equatable
  private implements Appendable
  implements Sequenceable


  internal _CatVec

  expression
  | 'Catvec[]': '_CatVec(Node(), 0, 0) :~ Catvec'
  | 'Catvec[$(a :: Term)]': '_CatVec(Node(cow($a)), 1, 0) :~ Catvec'
  | 'Catvec[$a, $b]': '_CatVec(Node(cow($a, $b)), 2, 0) :~ Catvec'
  | 'Catvec[$a, $b, $c]': '_CatVec(Node(cow($a, $b, $c)), 3, 0) :~ Catvec'
  | 'Catvec[$a, $b, $c, $d, ...]': 'Catvec[$a, $b, $c].add_all(List($d, ...)) :~ Catvec'
  | 'Catvec()': '_CatVec(Node(), 0, 0, cow()) :~ Catvec'
  | 'Catvec($root, $size, $height)': '_CatVec($root, $size, $height) :~ Catvec'


  macro 'EMPTY': 'Catvec[]'
  export:
    EMPTY
    from

  override to_sequence():
    Sequence.instantiable(
      fun():
        if size == 0
        | []
        | def (mutable node :~ Node, mutable subidx :~ Int) = node_for(0)
          Sequence.instantiate(~initial_position: 0,
                               ~continue_at_position: fun (pos): pos < size,
                               ~position_to_element: fun (pos): if radix(pos, 0) < node.size
                                                                | node[radix(pos, 0)]
                                                                | let (_node, _subidx) = node_for(pos)
                                                                  node := _node
                                                                  subidx := _subidx
                                                                  node[radix(subidx, 0)],
                               ~position_to_next: fun (pos): pos + 1)
    )

/*
  
  sequence '$lhs: $rhs':
    '(~outer_binds:
        p :~ Catvec = $rhs,
      ~recur_binds:
        pos = 0,
      ~head_guard:
        pos < p.size,
      ~inner_binds:
        $lhs = p[pos],
      ~recur_args:
        (pos + 1))'
  */
    
  property balanced:
    root.balanced

  // TODO i want it to be equal if the represented sequence is equal which requires walkikng the tree
  // how to do efficiently?
  private override equals(rhs :~ Catvec, recur):
    size == rhs.size && for values(eq = #true):
      each i: 0..size
      eq && recur(rhs[i], this[i])

  private override hash_code(recur):
    recur(root)
    
  override get(index :~ Int):
    let (node :~ Node, subidx :~ Int) = node_for(index)
    node[subidx bits.and MASK]

/* TODO private */
  method node_for(index :~ NonnegInt): // :: values(Node, Int)
    cond
    | size == 0 || index < 0 || index >= size:
        error(#'Catvec_internal, "index out of range")
    | height == 0:
        values(root, index)
    | ~else:
        recur walk(node :~ Node = root, index = index, depth = height):
          cond
          | node.balanced:
              values(for values(n = node):
                       each i: List.iota(depth + 1).rest.reverse()
                       n.get(radix(index, i)),
                     index)
          | depth == 1:
              let (bi, si) = step(node, index, depth)
              values(node[bi], si)
          | ~else:
              let (bi, si) = step(node, index, depth)
              walk(node.get(bi), si, depth - 1)
      
    
  // functionally update the slot at `index` to `el`
  method set(index :~ Int, el) :~ Catvec:
    def new_node = recur set(node :~ Node  = root, index = index, el = el, depth = height):
      cond
      | depth == 0:
          node.set(radix(index, depth), el)
      | node.balanced:
          def branch_index = radix(index, depth)
          node.set(branch_index, set(node.get(branch_index), index, el, depth - 1))
      | ~else:
          def (branch_index, subindex) = step(node, index, depth)
          node.set(branch_index, set(node.get(branch_index), subindex, el, depth - 1))

    Catvec(new_node, size, height)

  // add `el` to end of vector
  method add(el) :~ Catvec:
    if size == 0
    | Catvec(leaf(el), 1, 0)
    | def count = copyable_count(root, height)
      if count == 0
      | /* not enough space in original tree */
        Catvec(Node(cow(root, new_branch(el, height)),
                    root.sizes && cow(size, size + 1)),
               size + 1,
               height + 1)
      | /* enough space in original tree */
        Catvec(build(root, count, height, el),
               size + 1,
               height)
    

  // TODO chunk adding here by 32 and add whole nodes at a time?
  method add_all(els :~ Sequence) :~ Catvec:
    for values(t = this):
      each:
        el: els
      t.add(el)

  // TODO shoudl be able to make this faster. At the least, we can grab whole leaf nodes at a time 
  // rather than traverse once per element of represented vector
  method to_list() :~ List:
    for List:
      each idx: 0..size
      get(idx)

  method length() :~ Int:
    size
      
  // trees that are a result of this method may not meet invariants, but rebalancing is costly
  // and future concatenations would restore the invariants due to rebalancing being done on concats.
  // TODO write some tests showing this
  method take(pos :~ NonnegInt) :~ Catvec:
    cond
    | pos < 0 || pos > size:
        error(#'Catvec_take, "index out of range")
    | pos == 0:
        Catvec[]
    | pos == size:
        this
    | ~else:
        def new_root = recur take(node :~ Node = root, index = pos - 1, depth = height) :~ Node:
          cond
          | depth == 0:
              Node(cow_take(node.children, radix(index, 0) + 1))
          | node.balanced:
              def branch_index = radix(index, depth)
              def new_children :~ Array.of(Node) = vector.take(node.children, branch_index + 1)
              if depth == 0
              |  Node(unsafe.freeze(new_children))
              |  Node(cow_set(unsafe.freeze(new_children),
                              branch_index,
                              take(node.children[branch_index], index, depth - 1)))
          | ~else:
              def (branch_index, subindex) = step(node, index, depth)
              def new_children :~ Array.of(Node) = vector.take(node.children, branch_index + 1)
              def new_sizes :~ Array.of(Int)  = vector.take(node.sizes, branch_index + 1)
              new_children[branch_index] := take(node.get(branch_index), subindex, depth - 1)
              new_sizes[branch_index] := index + 1
              Node(unsafe.freeze(new_children),
                   unsafe.freeze(new_sizes))

        recur squash(node :~ Node = new_root, new_height = height):
          if node.size == 1 && new_height > 0
          | squash(node.first, new_height - 1)
          | Catvec(node, pos, new_height)
        

  method drop(pos :~ NonnegInt) :~ Catvec:
    cond
    | pos < 0 || pos > size:
        error(#'Catvec_drop, "index out of range")
    | pos == 0:
        this
    | pos == size:
        Catvec[]
    | ~else:
        def new_root = recur drop(node :~ Node = root, index :~ Int = pos, depth :~ Int = height) :~ Node:
          cond
          | depth == 0:
              Node(cow_drop(node.children, radix(index, 0)))
          | node.balanced:
              def branch_index = radix(index, depth)
              def new_children :~ Array.of(Node) = vector.drop(node.children, branch_index)
              def new_child :~ Node = drop(node.get(branch_index), index, depth - 1)
              new_children[0] := new_child
              
              def size0 :~ Int:
                if depth == 1 || new_child.balanced
                | (1 bits.(<<) (depth * BITS)) - radix(index, block: //println(depth)
                                                                     //println(radix(index, depth - 1))
                                                                     depth - 1)
                | (new_child.sizes :~ Cow.of(Int))[new_child.size - 1]
              //println(size0)
              def new_len = node.size - branch_index    
              def step = 1 bits.(<<) (depth * BITS)
              def new_sizes = Array.make(new_len)
              
              for (i: 0 .. new_sizes.length()):
                new_sizes[i] := (size0 + i * step)
                
              Node(unsafe.freeze(new_children),
                   unsafe.freeze(new_sizes))
          | ~else:
              def (branch_index, subindex) = step(node, index, depth)
              def new_children :~ Array.of(Node) = vector.drop(node.children, branch_index)
              def new_sizes = for Array:
                each i: branch_index .. (node.sizes :~ Cow.of(Int)).length()
                (node.sizes :~ Cow.of(Int))[i] - index 
              def new_child = drop(node.get(branch_index), subindex, depth - 1)
                
              new_children[0] := new_child  
              Node(unsafe.freeze(new_children),
                   unsafe.freeze(new_sizes))

        def t :~ Catvec:
          recur squash(node :~ Node = new_root, new_height = height):
            if node.size == 1 && new_height > 0
            | squash(node.first, new_height - 1)
            | Catvec(node, size - pos, new_height)

        // TODO explain
        if t.height > 1 && t.root.sizes
        | def sizes = cow_set(t.root.sizes, t.root.size - 1, t.size)
          Catvec(Node(t.root.children, sizes), t.size, t.height) 
        | t


  // :( can't annotate multiple return values on methods
  method split(at :~ NonnegInt): // :~ (Catvec, Catvec):
    cond
    | at == 0: values(Catvec[], this)
    | at == size: values(this, Catvec[])
    | at > 0 && at < size: values(take(at), drop(at))
    | ~else: error(#'split, "invalid index")

  method insert(at :~ NonnegInt, el) :~ Catvec:
    cond
    | at <= 0:
        Catvec[].add(el).concat(this)
    | at >= size - 1:
        this.add(el)
    | ~else:
        let (l :~ Catvec, r :~ Catvec) = split(at)
        l.add(el).concat(r)

  method cons(el) :~ Catvec:
    insert(0, el)

  method pop() :~ Catvec:
    take(size - 1)

  private override method append(rhs :~ Catvec) :~ Catvec:
    concat(rhs)
    
  method concat(rhs :~ Catvec) :~ Catvec:
    cond
    | size == 0: rhs
    | rhs.size == 0: this
    | ~else:
        calc_height_and_wrap(
          concat_subtree(root,
                         height,
                         rhs.root,
                         rhs.height,
                         #true),
          size + rhs.size)

  method sublist(start :~ Int = 0, end :~ Int = size) :~ Catvec:
    cond
    | start < 0 || end > size:
        error(#'Catvec_sublist, "index out of range")
    | start == 0 && end == size:
        this
    | ~else:
        drop(start).take(end - start)



/* helper functions */

fun concat_subtree(left :~ Node,
                   height_l :~ Int,
                   right :~ Node,
                   height_r :~ Int,
                   top :~ Boolean) :~ Node:
  cond
  /* only trees of the same height can be concatenated */
  | height_l > height_r:
      rebalance(left,
                concat_subtree(left.last,
                               height_l - 1,
                               right,
                               height_r,
                               #false),
                #false,
                height_l,
                top)
  | height_l < height_r:
      rebalance(#false,
                concat_subtree(left,
                               height_l,
                               right.first,
                               height_r - 1,
                               #false),
                right,
                height_r,
                top)
  | height_l == 0:
      if top && left.size + right.size <= MAX_WIDTH
      | Node(vector.concat(left.children, right.children))
      | set_sizes(cow(left, right), 1)
  | ~else:
      /* two internal nodes with same height */
      rebalance(left,
                concat_subtree(left.last,
                               height_l - 1,
                               right.first,
                               height_r - 1,
                               #false),
                right,
                height_l,
                top)

fun rebalance(left :~ maybe(Node),
              center :~ Node,
              right :~ maybe(Node),
              height :~ Int,
              top :~ Boolean) :~ Node:
  def all_slots = merge_nodes(left, center, right)
  def plan = concat_plan(all_slots)
  def rebalanced_slots = exec_concat_plan(all_slots, plan, height)

  cond
  | rebalanced_slots.length() <= MAX_WIDTH && !top:
      Node(cow(set_sizes(unsafe.freeze(rebalanced_slots), height)))
  | rebalanced_slots.length() <= MAX_WIDTH:
      set_sizes(unsafe.freeze(rebalanced_slots), height)
  | ~else:
      def (new_left, new_right) = vector.split(rebalanced_slots, MAX_WIDTH)
      set_sizes(cow(set_sizes(unsafe.freeze(new_left), height),
                    set_sizes(unsafe.freeze(new_right), height)),
                height + 1)
                   

/* merge all children except for the rightmost in `left` and leftmost in `right` */
fun merge_nodes(left :~ maybe(Node), center :~ Node, right :~ maybe(Node)) :~ Array:
  vector.concat(if !left || Node.size(left) == 0 | cow() | vector.drop_right(Node.children(left), 1),
                center.children,
                if !right || Node.size(right) == 0 | cow() | vector.drop(Node.children(right), 1))

// TODO how to avoid setting sizes when the tree is leftwise dense?
#//
fun set_sizes(children :~ Array, height :~ Int) :~ Node:
  if height == 0
  | Node(children)
  | // TODO do this more efficiently
    def (sizes, _):
      for values(sizes = cow(), sum = 0):
        each i: 0 .. children.length()
        def child_size =  size_subtree(children[i], height - 1)
        values(cow_add(sizes, sum + child_size),
               sum + child_size)
             

    Node(children, sizes)
// TODO how to avoid setting sizes when the tree is leftwise dense?
fun set_sizes(children :~ Cow, height :~ Int) :~ Node:
  if height == 0
  | Node(children)
  | // TODO do this more efficiently
    def (sizes, _):
      for values(sizes = cow(), sum = 0):
        each i: 0 .. children.length()
        def child_size =  size_subtree(children[i], height - 1)
        values(cow_add(sizes, sum + child_size),
               sum + child_size)
             

    Node(children, sizes)



// TODO redesign this to be less imperative?
/* receives a node that is temporarily allowed to have > max_width children, redistributes it to conform to invariant */
fun concat_plan(slots :~ Array) :~ maybe(Array):
  def plan = Array.make(slots.length())
  def child_count:
    for values(count = 0):
      each i: 0 .. slots.length()
              
      plan[i] := (slots[i] :~ Node).size
      count + plan[i]

  def optimal_node_len = math.ceiling(child_count / MAX_WIDTH)
  def target_node_len = optimal_node_len + MAX_ERROR
  
  if target_node_len >= plan.length()
  | #false
  | distribute(plan.copy(), target_node_len, plan.length())
             
fun distribute(plan :~ Array, target :~ Int, count :~ Int, node_idx :~ Int = 0) :~ Array:
  if target >= count:
  | vector.take(plan, count)
  | let i = short_node(plan, node_idx)
    let (i, r):
      // TODO better way to do this?
      for values(i = short_node(plan, node_idx),
                 r = plan[i]):
        each _: 0..
        final_when r == 0
        def min_size = math.min(r + plan[i + 1], MAX_WIDTH)
        plan[i] := min_size
        values(i + 1, r + plan[i + 1] - min_size)

    /* we've removed a node (conceptually) at this point,
    so move nodes to the right of current node left by one */
    for (j: i .. count - 1):
      plan[j] := plan[j + 1]

    distribute(plan, target, count - 1, i - 1)

           
fun short_node(plan :~ Array, i :~ Int) :~ Int:
  if plan[i] < MAX_WIDTH - 1
  | i
  | short_node(plan, i + 1)


fun exec_concat_plan(slots :~ Array,
                     plan :~ maybe(Array),
                     height :~ Int) :~ Array:
  if !plan
  | slots
  | let plan :~ Array = plan
    def flattened:
      for Array:
        each node :~ Node: slots
        each child: node.children
        child
        
    def new_slots = Array.make(plan.length())
    for values(sum = 0):
      each i: 0..plan.length()
              
      let new_sum = sum + plan[i]
      let new_node:
        for Array:
          each j: sum .. new_sum
          flattened[j]
      new_slots[i] :=  set_sizes(unsafe.freeze(new_node), height - 1)
      
      new_sum
             
    new_slots


// TODO can we calculate this along the way and get rid of this extra traversal?
fun calc_height_and_wrap(root :~ Node, size :~ Int):
  def (_, height):
    for values(node = root :~ Node, height = 0):
      each i: 0..
      final_when !(Node.first(node) is_a Node)
      values(Node.first(node), i)
    
  Catvec(root, size, height)



/* TODO: is this a bug waiting to happen?
  We're calling this to set sizes and then assuming we can
  rely on the presence of sizes array already.
  seems to work except for in case of right-most child of root node,
  which we are currently correcting for in concat
*/
#//
fun size_subtree(node :~ Node, height :~ Int):
  
  cond
  | height == 0:
      node.children.length()
  | node.sizes:
      (node.sizes :~ Cow)[node.size - 1]
  | ~else:
      for values(sum = 0):
        each i: 0..node.children.length()
        sum + size_subtree(node.children[i], height - 1)
      #//
      // if sizes is #false, then we know we have a leftwise-dense subtree TODO: do we though?
      ((node.size - 1) bits.(<<) (height * BITS)) + size_subtree(node.last, height - 1)

  #//
  match [height, node.sizes]
  | [0, _]: node.children.length()
  | [_, sizes :~ Cow]: sizes[node.size - 1]
  | [h, #false]: // if sizes is #false, then we know we have a leftwise-dense subtree TODO: do we though?
      ((node.size - 1) bits.(<<) (h * BITS)) + size_subtree(node.last, h - 1)
  | ~else: internal_error: "size_subtree"
                           
fun size_subtree(node :~ Node, height :~ Int):
  cond
  | height == 0:
      node.children.length()
  | node.sizes:
      (node.sizes :~ Array)[node.size - 1]
  | ~else: // if sizes is #false, then we know we have a leftwise-dense subtree TODO: do we though?
      ((node.size - 1) bits.(<<) (height * BITS)) + size_subtree(node.last, height - 1)


/* helper functions */
                      
fun scan_sizes(sizes :~ Cow, target_index, i = 0) :~ Int:
  if sizes[i] <= target_index
  | scan_sizes(sizes, target_index, i + 1)
  | i

// calculate next branch to take and subindex of `index` along that path
fun step(node :~ Node, index, depth) :~ (NonnegInt, NonnegInt):
  let sizes :~ Cow = node.sizes
  def branch = scan_sizes(sizes, index, radix(index, depth))
  values(branch,
         if branch == 0
         | index
         | index - sizes[branch - 1])

// count number of nodes that either have room themselves for another element and/or branch,
// or one of their right-most descendents has room
  
// TODO very large trees (larger than 32^3) tend to go OOM in this function.
// is there a more efficient way tod o this? Perhaps just assume there's room in the tree
// and check properties of the generated new_root to see if that's correct or not?
fun copyable_count(node :~ Node, height):
  def (_, count):
    for values(n = node, count = 0):
      each i: 0 .. height + 1
      def l = n.size
      values(if l == 0
             | n
             | n.get(l - 1),
             if l < MAX_WIDTH
             | i + 1
             | count)
  count


//  using `count` returned from `copyable_count`, copy `count` nodes along right-most path of `n`,
// then insert new element in leaf node or new branch if `count` << `height`
fun build(n :~ Node, count, height, el):
  if count < 2
  | if height == 0
    | Node(cow_add(n.children, el))
    | Node(cow_add(n.children,
                   new_branch(el, height - 1)))
  | Node(cow_set(n.children,
                 n.size - 1,
                 build(n.get(n.size - 1),
                       count - 1,
                       height - 1,
                       el)),
         n.sizes && cow_set(n.sizes,
                            Array.length(n.sizes) - 1,
                            (n.sizes :~ Array)[Array.length(n.sizes) - 1] + 1))

// create a branch of height `height` terminating in a unary leaf node containing `el`
fun new_branch(el, height):
  if height == 0
  | leaf(el)
  | Node(cow(new_branch(el, height - 1)))
    

fun
| from() :~ Catvec: Catvec[]
| from(s :~ Sequence) :~ Catvec:
    for values(v = Catvec[]) (el: s):
      v.add(el)
                   
module test:
  macro 'checkP $msg:
           $body':
    'TODO'

  /* Node tests */ 
  let leaf_n :~ Node = Node(cow(1, 2, 3, 4))
  let internal_balanced_n :~ Node = Node(cow(Node(Cow.from(0..32)),
                                             Node(Cow.from(32..64)),
                                             Node(Cow.from(64..96))))
  let internal_unbalanced_n :~ Node = Node(cow(Node(Cow.from(0..32)),
                                               Node(Cow.from(32..60)),
                                               Node(Cow.from(60..90))),
                                           cow(32, 60, 90))


  check: // equatable
    leaf_n ~is Node(cow(1, 2, 3, 4))
    leaf_n ~is Node(cow(1, 2, 3, 4), cow(1, 2, 3)) // sizes arr here is bogus but ignored for equality    
    internal_balanced_n  ~is Node(internal_balanced_n.children, cow(1, 2, 3))
    internal_unbalanced_n ~is Node(internal_unbalanced_n.children)
    internal_unbalanced_n ~is Node(internal_unbalanced_n.children)


  check: //balanced
    leaf_n.balanced ~is #true
    internal_balanced_n.balanced ~is !internal_unbalanced_n.balanced
         
  check: //size
    leaf_n.size ~is 4
    internal_balanced_n.size ~is 3
    internal_unbalanced_n.size ~is 3

  check: //first
    leaf_n.first ~is 1
    internal_balanced_n.first ~is Node(Cow.from(0..32))
    internal_unbalanced_n.first ~is Node(Cow.from(0..32))

  check: //last
    leaf_n.last ~is 4
    internal_balanced_n.last ~is Node(Cow.from(64..96))
    internal_unbalanced_n.last ~is Node(Cow.from(60..90))

  check: // get
    leaf_n.get(0) ~is leaf_n[0]
    leaf_n[3] ~is 4
    internal_balanced_n.get(0) ~is internal_balanced_n[0]
    internal_balanced_n.get(1) ~is Node(Cow.from(32..64))
    internal_unbalanced_n.get(0) ~is internal_unbalanced_n[0]
    internal_unbalanced_n.get(1) ~is Node(Cow.from(32 .. 60))

  check: // set
    leaf_n.set(0, -1) ~is Node(cow(-1, 2, 3, 4))
    internal_balanced_n.set(0, -1).set(1, -1).set(2, -1) ~is Node(cow(-1, -1, -1))
    internal_unbalanced_n.set(0, -1).set(1, -1).set(2, -1) ~is Node(cow(-1, -1, -1))

  check: // hash_code just for coverage really
    {leaf_n: 0}[Node(cow(1,2,3,4), cow(9,9,99,99))] ~is 0
    {Node(): -1}[Node(cow(), cow())] ~is -1

  check: // leaf macro
    leaf(1, 2, 3, 4) ~is leaf_n
    leaf(leaf(1, 2, 3, 4), leaf(5, 6)) ~is Node(cow(leaf(1,2,3,4),
                                                    leaf(5,6)))


  /* ---------- Catvec ----------
    class Catvec(root :~ Node,
             size :~ NonnegInt,
             height :~ NonnegInt):
  implements Indexable
  private implements Equatable
  private implements Appendable */

  // expressions
  check: Catvec(Node(), 0, 0) ~is Catvec[]
         Catvec(leaf(1), 1, 0) ~is Catvec[1]
         Catvec(leaf(1, 2), 2, 0) ~is Catvec[1, 2]
         Catvec(leaf(1, 2, 3), 3, 0) ~is Catvec[1, 2, 3]
         Catvec(leaf(1, 2, 3, 4), 4, 0) ~is Catvec[1, 2, 3, 4]
         Catvec(leaf(1, 2, 3, 4, 5), 5, 0) ~is Catvec[1, 2, 3, 4, 5]
         Catvec(leaf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20), 20, 0) ~is Catvec[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]


  // start with testing some balanced vecs

  let empty :~ Catvec = Catvec[]
  let small :~ Catvec = Catvec[1, 2, 3, 4, 5]
  let small_ub /* ub for unbalanced */ :~ Catvec = Catvec(Node(cow(Node(cow(1, 2, 3, 4)),
                                                                   Node(cow(5))),
                                                               cow(4, 5)),
                                                          5, 1)
  let medium :~ Catvec = Catvec[].add_all(List.iota(1024))
  let medium_ub :~ Catvec = Catvec.from(0..300) ++ Catvec.from(300..600) ++ Catvec.from(600..900) ++ Catvec.from(900..1024)
  let large :~ Catvec = Catvec[].add_all(List.iota(MAX_WIDTH ** 4 + 1))
  let large_ub :~ Catvec = Catvec.from(0..32) ++ Catvec.from(32..(32**2)) ++ Catvec.from((32**2)..(32**3)) ++ Catvec.from((32**3)..(32**4))

  check: // get near beginning
    empty.get(0) ~raises ""
    small.get(0) ~is 1
    medium.get(0) ~is 0
    small_ub.get(0) ~is 1
    medium_ub.get(0) ~is 0
    large_ub.get(0) ~is 0

  check: // get in the middle
    empty.get(1) ~raises ""
    small.get(1) ~is 2
    medium.get(500) ~is 500
    small_ub.get(2) ~is 3
    medium_ub.get(300) ~is 300
    large_ub.get(16**3) ~is 16**3

  check: // get at the end
    empty.get(10000000) ~raises ""
    small.get(4) ~is 5
    medium.get(1023) ~is 1023
    small_ub.get(4) ~is 5
    medium_ub.get(1023) ~is 1023
    large_ub.get(32**3) ~is 32**3


// add

  check: // add
    empty.add(1) ~is Catvec[1]
    small.add(1) ~is Catvec[1, 2, 3, 4, 5, 1]
    medium.add(1).to_list() ~is List.iota(1024) ++ [1]
    large.add(1).get(large.size) ~is 1
    small_ub.add(1) ~is Catvec[1, 2, 3, 4, 5, 1]
    medium_ub.add(1).to_list() ~is List.iota(1024) ++ [1]
    large_ub.add(1).to_list() ~is List.iota(32**4) ++ [1]

  //set
  check: // set near beginning
    empty.set(0, -1) ~raises ""
    small.set(0, -1) ~is Catvec[-1, 2, 3, 4, 5]
    medium.set(0, -1).get(0) ~is -1
    large.set(0, -1).get(0) ~is -1
    small_ub.set(0, -1) ~is Catvec[-1, 2, 3, 4, 5]
    medium_ub.set(0, -1).get(0) ~is -1
    large_ub.set(0, -1).get(0) ~is -1
    

  check: // set in the middle
    empty.set(1, -1) ~raises ""
    small.set(1, -1) ~is Catvec[1, -1, 3, 4, 5]
    medium.set(500, -1).get(500) ~is -1
    large.set((MAX_WIDTH ** 4) div 2, -1).get((MAX_WIDTH ** 4) div 2) ~is -1
    small_ub.set(1, -1) ~is Catvec[1, -1, 3, 4, 5]
    medium_ub.set(500, -1).get(500) ~is -1
    large_ub.set((MAX_WIDTH ** 4) div 2, -1).get((MAX_WIDTH ** 4) div 2) ~is -1
    
  check: // set at the end
    empty.set(100000, -1) ~raises ""
    small.set(4, -1) ~is Catvec[1, 2, 3, 4, -1]
    medium.set(1023, -1).get(1023) ~is -1
    large.set(MAX_WIDTH ** 4, -1).get(MAX_WIDTH ** 4) ~is -1
    small_ub.set(4, -1) ~is Catvec[1, 2, 3, 4, -1]
    medium_ub.set(1023, -1).get(1023) ~is -1
   // large_ub.set(MAX_WIDTH ** 4, -1).get(MAX_WIDTH ** 4) ~is -1


  // take

  check: // take 0
    empty.take(0) ~is Catvec[]
    small.take(0) ~is Catvec[]
    medium.take(0) ~is Catvec[]
    large.take(0) ~is Catvec[]
    small_ub.take(0) ~is Catvec[]
    medium_ub.take(0) ~is Catvec[]
    large_ub.take(0) ~is Catvec[]

  check: // take size
    empty.take(empty.size) ~is Catvec[]
    small.take(small.size) ~is small
    medium.take(medium.size) == medium ~is #true
    large.take(large.size) == large ~is #true
    small_ub.take(small_ub.size) ~is small_ub
    medium_ub.take(medium_ub.size) == medium_ub ~is #true
    large_ub.take(large_ub.size) == large_ub ~is #true

  check: // take small
    empty.take(1) ~raises ""
    small.take(1) ~is Catvec[1]
    medium.take(1) ~is Catvec[0]
    large.take(1) ~is Catvec[0]
    small_ub.take(1) ~is Catvec[1]
    medium_ub.take(1) ~is Catvec[0]

  check: // take medium
    empty.take(10) ~raises ""
    small.take(2) ~is Catvec[1, 2]
    medium.take(10) == Catvec[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] ~is #true
    large.take(100).to_list() == List.iota(100) ~is #true
    small_ub.take(2) ~is Catvec[1, 2]
    medium_ub.take(10) == Catvec[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] ~is #true

  check: // take large
    empty.take(10000).to_list() ~raises ""
    small.take(4).to_list() ~is [1, 2, 3, 4]
    medium.take(1000).to_list() == List.iota(1000) ~is #true
    large.take(10000).to_list() == List.iota(10000) ~is #true
    small_ub.take(4).to_list() ~is [1, 2, 3, 4]
    medium_ub.take(1000).to_list() == List.iota(1000) ~is #true

  check: // take error
    small.take(100) ~raises ""
    medium.take(1000000000) ~raises ""
    large.take(10000000000000000000000000000000000000000000000000000000000) ~raises ""

  // drop
    // known issues: medium and large pos drops on medium and large size vectors
  check: // drop 0
    empty.drop(0) ~is empty
    small.drop(0) ~is small
    medium.drop(0) == medium ~is #true
    large.drop(0) == large ~is #true

  check: // drop size
    empty.drop(0) ~is Catvec[]
    small.drop(small.size) ~is Catvec[]
    medium.drop(medium.size) ~is Catvec[]
    large.drop(large.size) ~is Catvec[]
    small_ub.drop(small_ub.size) ~is Catvec[]
    medium_ub.drop(medium_ub.size) ~is Catvec[]

  check: // drop small
    empty.drop(1) ~raises ""
    small.drop(1) ~is Catvec[2, 3, 4, 5]
    medium.drop(1).to_list() == List.iota(medium.size).rest ~is #true
    large.drop(1).to_list() == List.iota(large.size).rest ~is #true
    small_ub.drop(1) ~is Catvec[2, 3, 4, 5]
    medium_ub.drop(1).to_list() == List.iota(medium.size).rest ~is #true

  check: // drop medium
    empty.drop(10) ~raises ""
    small.drop(2) ~is Catvec[3, 4, 5]
    medium.drop(10).to_list() == Function.map(fun (x): x + 10, List.iota(medium.size - 10)) ~is #true
   // large.drop(100).to_list() == List.iota(100) ~is #true
    small_ub.drop(2) ~is Catvec[3, 4, 5]
    medium_ub.drop(10).to_list() == Function.map(fun (x): x + 10, List.iota(medium.size - 10)) ~is #true

  check: // drop large
    empty.drop(10000).to_list() ~raises ""
    small.drop(4).to_list() ~is [5]
    medium.drop(100).take(100).to_list() == Function.map(fun (x): x + 100, List.iota(100)) ~is #true
    large.drop(10000).take(10000).to_list() == Function.map(fun (x): x + 10000, List.iota(10000)) ~is #true
    small_ub.drop(4).to_list() ~is [5]
    medium_ub.drop(100).take(100).to_list() == Function.map(fun (x): x + 100, List.iota(100)) ~is #true

  check: // drop error
    small.drop(-1) ~raises ""
    medium.drop(-1000000000) ~raises ""
    large.drop(-10000000000000000000000000000000000000000000000000000000000) ~raises ""
 

// append
  check: // append identity
    (empty ++ empty :~ Catvec).to_list() ~is (empty.to_list() ++ empty.to_list())
    (small ++ small :~ Catvec).to_list() ~is (small.to_list() ++ small.to_list())
    (medium ++ medium :~ Catvec).to_list() ~is (medium.to_list() ++ medium.to_list())
    (small_ub ++ small_ub :~ Catvec).to_list() ~is (small_ub.to_list() ++ small_ub.to_list())
    (medium_ub ++ medium_ub :~ Catvec).to_list() ~is (medium_ub.to_list() ++ medium_ub.to_list())
    //(large ++ large :~ Catvec).to_list() ~is (large.to_list() ++ large.to_list())

  let i = 2
  check: // take and drop identity
    small.drop(i).take(i) ~is small.take(2 * i).drop(i)
    medium.drop(i * 2).take(i * 2) ~is medium.take(i * 4).drop(i * 2)
    small_ub.drop(i).take(i) ~is small_ub.take(2 * i).drop(i)
    medium_ub.drop(i * 2).take(i * 2) ~is medium_ub.take(i * 4).drop(i * 2)


  let (vec :~ Catvec, lst :~ List):
    for values(v = Catvec[1], l = [1]):
      each i: 0..10
      match math.random(4)
      | 0: values(v.add(i), l ++ [i])
      | 1: values(v.insert(0, i), List.cons(i, l))
      | 2: values(v ++ v, l ++ l)
      | 3: values(v.set(0, -i), List.cons(-i, l.rest))

  macro '$l ++? $r':
    '($l ++ $r).to_list() == (($l).to_list() ++ ($r).to_list())'

  check: small ++? small ~is #true
         medium ++? medium ~is #true
   //      large ++? large ~is #true
         small_ub ++? small_ub ~is #true
         medium_ub ++? medium_ub ~is #true
    //     large_ub ++? large_ub ~is #true


  check: vec.to_list() ~is lst
         vec ++? vec ~is #true
         vec ++? small ~is #true
         small ++? vec ~is #true
         medium ++? vec ~is #true
         vec ++? medium ~is #true
 //        large ++? vec ~is #true
  //       vec ++? large ~is #true
         vec ++? small_ub ~is #true
         vec ++? medium_ub ~is #true
 //        vec ++? large_ub ~is #true
         small_ub ++? vec ~is #true
         medium_ub ++? vec ~is #true
 //        large_ub ++? vec ~is #true

     

  check: // append for uneven height vectors
    empty ++? small ~is #true
    small ++? empty ~is #true
    small ++? medium ~is #true
    medium ++? small ~is #true
//    medium ++? large ~is #true
//    large ++? medium ~is #true
    empty ++? small_ub ~is #true
    small_ub ++? empty ~is #true
    small_ub ++? medium ~is #true
    small_ub ++? medium_ub ~is #true
    medium_ub ++? small_ub ~is #true
    medium_ub ++? small ~is #true
    medium_ub ++? medium ~is #true
//    medium_ub ++? large ~is #true
//    large_ub ++? medium_ub ~is #true
//    large_ub ++? medium ~is #true

  for (i: 0 .. 100): // pop of singleton => empty
    def n = math.random(100)
    check: Catvec[n].pop()
           ~is Catvec.EMPTY
    check: Catvec[n].add(n).pop()
           ~is Catvec[n]

  // insert
  check: // insert
    empty.insert(0, 1) ~is Catvec[1]
    small.insert(0, 1) ~is Catvec[1, 1, 2, 3, 4, 5]
    small.insert(2, 1) ~is Catvec[1, 2, 1, 3, 4, 5]
    medium.insert(0, 1) == medium.cons(1) ~is #true
    small_ub.insert(2, 1) ~is Catvec[1, 2, 1, 3, 4, 5]
    small_ub.insert(0, 1) ~is small_ub.cons(1)
    medium_ub.insert(0, 1) == medium_ub.cons(1) ~is #true
    medium_ub.insert(50, 1) == (medium_ub.sublist(0, 50).add(1) ++ medium_ub.sublist(50, medium_ub.size)) ~is #true


  check: // pop
    empty.pop() ~raises ""
    small.add(1).pop() ~is small
    medium.add(1).pop() ~is medium
    small_ub.add(1).pop() ~is small_ub
    medium_ub.add(1).pop() ~is medium_ub
    (Catvec[1, 2, 3] ++ Catvec[4, 5]).pop() ~is Catvec[1, 2, 3, 4]
