#lang rhombus/static/and_meta

import "utils.rhm" open
import "cow_array.rhm" open:
  rename: EMPTY as EMPTY_COW

export:
  Vector
  EMPTY

/* persistent vector a 'la Clojure */

def BITS = 5
def MAX_WIDTH = 32
def MASK = 31

macro 'radix($index, $level)':
  '((($index) bits.(>>) ($level)) bits.and MASK)'
  
module test:
  for (i: 0 .. 32):
    check: radix(i, 0)
           ~is i
    check: radix(i, 5)
           ~is 0
  for (i: 32 .. 64):
    check: radix(i, 5)
           ~is 1

class Node(data :: Cow):
  private implements Printable
  private implements Sequenceable
  sequence '$lhs: $rhs':
    '(~outer_binds:
        p = $rhs,
      ~recur_binds:
        pos = 0,
      ~head_guard:
        pos < 2,
      ~inner_binds:
        $lhs = if pos == 0 | Posn.y(p) | Posn.x(p),
      ~recur_args:
        (pos + 1))'

  private override to_sequence():
    TODO "to sequence"
  
  constructor
  | (): super(unsafe.freeze(Array.make(MAX_WIDTH, #false)))
  | (data :: Array):
      def _data = Array.make(MAX_WIDTH, #false)
      Array.copy_from(_data, 0, data)
      super(unsafe.freeze(_data))

  property first: data[0]
  property last:
    for values(_last = #false) (d: data):
      break_when !d
      d

  method describe_data():
    cond
    | data.length() == 0 || !data[0]:
        "<>"
    | data.length() == 1 || !data[1]:
        PrintDesc.concat("<", to_string(data[0]), ">")
    | ~else:
        PrintDesc.concat(
          "<",
          to_string(data[0]),
          recur go(idx = 1):
            if idx >= MAX_WIDTH || !data[idx]
            | ">"
            | PrintDesc.concat(", ", to_string(data[idx]), go(idx + 1)))

  private override describe(mode, recur):
    cond
    | data.length() == 0 || !data[0]:
        "<>"
    | (data[0] is_a Node):
        PrintDesc.list("<",
                       for List:
                         each node :~ Node: data
                         break_when !node
                         PrintDesc.concat(node.describe_data(), PrintDesc.or(";", PrintDesc.newline())),
                       ">")
        /*
        PrintDesc.or(
          PrintDesc.list("<",
                         for List:
                           each node :~ Node: data
                           break_when !node
                           PrintDesc.concat(node.describe_data(), PrintDesc.or(";", PrintDesc.newline()),
                         ">"),
          PrintDesc.list("<",
                         for List:
                           each node :~ Node: data
                           break_when !node
                           PrintDesc.concat(node.describe_data(), PrintDesc.newline()),
                         ">")) */
    | ~else: describe_data()
        


module test:
  check: Node().data.length()
         ~is MAX_WIDTH
  check: Node(Array(1, 2, 3, 4)).data.length()
         ~is MAX_WIDTH
  check: Node(Array(1, 2, 3)).first
         ~is 1
  check: Node(Array(1, 2, 3)).last
         ~is 3
  check: to_string(Node(Array(1, 2, 3)))
         ~is "<1, 2, 3>"


/* TODO 
  - optimization: transients
  - optimization: have a 'head' in addition to 'tail' kept separately? would allow constant prepend and append
*/
class Vector(root :: Node = Node(),
             size :: NonnegInt = 0,
             shift :: NonnegInt = 0,
             tail :: Cow = cow()):
  implements Indexable
  private implements Equatable
  private implements Appendable
  
  export:
    from
/*
  // NOTE: I want to go look at the source of List.iota.
  // this should be easy to do from the docs                     
  internal _V
  expression
  | 'Vector[]': '_V(Node(), 0, 0, cow()) :~ Vector'
  | 'Vector[$(a :: Term)]': '_V(Node(), 1, 0, cow($a)) :~ Vector'
  | 'Vector[$a, $b]': '_V(Node(), 2, 0, cow($a, $b)) :~ Vector'
  | 'Vector[$a, $b, $c]': '_V(Node(), 3, 0, cow($a, $b, $c)) :~ Vector'
  | 'Vector[$a, $b, $c, $d, ...]': 'Vector[$a, $b, $c].add_all(List($d, ...)) :~ Vector'
  | 'Vector()': '_V(Node(), 0, 0, cow()) :~ Vector'
  | 'Vector($root, $size, $height, $tail)': ' _V($root, $size, $height, $tail) :~ Vector'
*/
  
  private override equals(rhs :~ Vector, recur):
    size == rhs.size
      && recur(tail, rhs.tail)
      && recur(root, rhs.root)

  private override hash_code(recur):
    Equatable.hash_code_combine(recur(root),
                                for values(hc = 0):
                                  each i: 0 .. (tail :~ Array).length()
                                  Equatable.hash_code_combine(hc, tail[i]))

  // slow (linear)
  private override append(rhs :~ Vector) :~ Vector:
    cond
    | size == 0: rhs
    | rhs.size == 0: this
    | ~else:
        recur f(i = 0, v :~ Vector = this, arr :~ Cow = array_for(0)):
          cond
          | i >= rhs.size:
              v
          | i >= rhs.size - rhs.tail_offset():
              for values(v = v :~ Vector):
                each a: (rhs.tail :~ Array)
                v.add(a)
          | i mod MAX_WIDTH == 0:
              let new_arr = array_for(i)
              f(i + 1, v.add(new_arr[0]), new_arr)
          | ~else:
              f(i + 1, v.add(arr[radix(i, 0)]), arr)

        
  method add(el) :~ Vector:
    // is there room in current root without overflow to a new level?
    def overflow = (size bits.(>>) BITS) > (1 bits.(<<) shift)
    
    cond
    | size - tail_offset() < MAX_WIDTH:
        Vector(root, size + 1, shift, cow_add(tail, el))
    | !root.data[0]:
        Vector(Node(tail), size + 1, shift, cow(el))
    | overflow:
        Vector(Node(cow(root, new_branch(shift, tail))), size + 1, shift + BITS, cow(el))
    | ~else: Vector(push_tail(shift, root, tail), size + 1, shift, cow(el))

  method add_all(seq :: Sequence) :~ Vector:
    for values(v = this):
      each val: seq
      v.add(val)
 

  override get(idx :: Int) :~ Vector:
    array_for(idx)[idx bits.and MASK]

  method set(idx :: Int, el) :~ Vector:
    cond
    | idx < size && idx >= tail_offset():
        def new_tail = (tail :~ Array).copy()
        new_tail[idx bits.and MASK] := el
        Vector(root, size, shift, cow_from(new_tail))
        
    | idx < size && idx >= 0:
        def new_root:
          recur set(level = shift, node :~ Node = root) :: Node:
            def data = node.data.copy()
            if level == 0
            | data[idx bits.and MASK] := el
            | def subidx = (idx bits.(>>) level) bits.and MASK
              data[subidx] := set(level - BITS, node.data[subidx])
              
            Node(data)
            
        Vector(new_root, size, shift, tail)
    | ~else: error(#'Vec, "index out of bounds")
        

  method take(pos :: Int) :~ Vector:
    cond
    | pos < 0 || pos > size:
        error(#'Vector_take, "index out of range")
    | pos == 0:
        EMPTY
    | pos == size:
        this
    | pos > tail_offset():
        Vector(root, pos, shift, cow_take(tail, pos - tail_offset()))
    | ~else:
        let (root :~ Node, tail :~ Cow):
          recur take(node :~ Node = root, level = shift):
            def subidx = radix(pos - 1, level)
            def new_children :~ Array = vector.take(node.data, subidx + 1)
            cond
            | level == 0: 
                // if we're here, then the initial v was shift == 0
                values(Node(), unsafe.freeze(new_children))
            | level == BITS:
                values(Node(cow_take(node.data,
                                     radix(pos - 1, BITS))),
                       cow_take((node.data[radix(pos - 1, BITS)] :~ Node).data, radix(pos - 1, 0) + 1))
            | ~else: let (r, t) = take(node.data[subidx], level - BITS)
                     new_children[subidx] := r
                     values(Node(new_children), t)
                     
// TODO detect need to squash efficiently and avoid it
        recur squash(node :~ Node = root, new_shift = shift):
          cond
          | !node || node.data.length() == 0 || !node.data[0]:
              if !tail || Array.length(tail) == 0 || !tail[0]
              | EMPTY
              | Vector(node, pos, 0, tail)
          | (node.data.length() <= 1 || !node.data[1]) && new_shift > 0:
              squash(node.first, new_shift - BITS)
          | ~else:
              Vector(node, pos, new_shift, tail)
              

  // inefficient because the not-dumb method breaks the leftwise-dense invariant
  method drop(pos :: Int) :~ Vector:
    cond
    | pos < 0 || pos > size:
        error(#'Vector_drop, "index out of range")
    | pos == 0:
        this
    | pos == size:
        EMPTY
    | ~else: for values(v = Vector()):
               each i: pos..size
               v.add(get(i))
        
         

  method pop() :~ Vector:
    cond
    | size == 0:
        error(#'Vec, "cannot pop an empty vector")
    | size == 1:
        EMPTY
    | size - tail_offset() > 1:
        def new_tail = Array.make(tail.length() - 1)
        Array.copy_from(new_tail, 0, tail, 0, new_tail.length())
        Vector(root, size - 1, shift, cow_from(new_tail))
    | ~else:
        def new_tail = array_for(size - 2) // TODO what??
        def new_root :: Node = pop_tail(shift, root) || Node()
        
        if shift > BITS && !(new_root.data[1])
        | Vector(new_root.data[0], size - 1, shift - BITS, new_tail)
        | Vector(new_root, size - 1, shift, new_tail)

  method split(at :: NonnegInt):// :: (Vector, Vector):
    cond
    | at == 0: values(EMPTY, this)
    | at == size: values(this, EMPTY)
    | at > 0 && at < size: values(take(at), drop(at))
    | ~else: error(#'Vector_split, "invalid index")



  // TODO inefficient
  method to_list() :: List:
    cond
    | size <= 32:
        for List:
          each i: 0 .. tail.length()
          break_when !tail[i]
          tail[i]
    | ~else:
        for List:
          each i: 0 .. size
          get(i)
      

  property first: get(0)
  property last: get(size - 1)
    

  /* helper methods */

  private method pop_tail(level :: Int, node :: Node) :: Node:
    def subidx = ((size - 2) bits.(>>) level) bits.and MASK
    cond
    | level > 5:
        def new_child = pop_tail(level - BITS, node.data[subidx])
        if !new_child && subidx == 0
        | #false
        | def data =node.data.copy()
          data[subidx] := new_child
          Node(data)
    | subidx == 0:
        #false
    | ~else:
        def data = node.data.copy()
        data[subidx] := #false
        Node(data)

  private method push_tail(level :: Int, parent :: Node, tail_node :: Cow) :: Node:
    def subidx = ((size - 1) bits.(>>) level) bits.and MASK
    def data = parent.data.copy()

    data[subidx] := if level == BITS
    | Node(tail_node)
    | def child = parent.data[subidx]
      if child
      | push_tail(level - BITS, child, tail_node)
      | new_branch(level - BITS, tail_node)
      
    Node(data)

// todo private
 // private
  method tail_offset():
    if size < 32
    | 0
    | ((size - 1) bits.(>>) BITS) bits.(<<) BITS

// todo private
  //private method array_for(idx) :~ Vec:
  method array_for(idx) :~ Cow:
    cond
    | idx < 0 || idx >= size:
        error(#'Vector, "index out of bounds")
    | idx >= this.tail_offset():
        tail
    | ~else:
        recur step(node :~ Node = root, i = shift):
          if i == 0
          | node.data
          | step(node.data[(idx bits.(>>) i) bits.and MASK], i - BITS)


            
/* helper functions */



fun from(seq :: Sequence) :~ Vector:
  for values(v  = EMPTY :~ Vector):
    each el: seq
    v.add(el)
    
fun new_branch(level :~ Int, data :~ Array) :: Node:
  //if level == 0
  if level <= 0
  | Node(data)
  | Node(Array(new_branch(level - BITS, data)))

// TODO smarter way to do this?
fun calc_shift(v :~ Vector):
    calc_height(v :~ Vector) * BITS
fun calc_height(v :~ Vector):
    bits.length(math.max(0, v.size - v.tail.length() - MAX_WIDTH)) div BITS
def EMPTY :~ Vector = Vector()

module test:
  check: EMPTY.add(1).to_list()
         ~is [1]

  let v :: Vector:
    for values(v = EMPTY):
      each i: 0 .. (MAX_WIDTH + 10)
      v.add(i)

  for (i: 0 .. MAX_WIDTH + 10):
    check: v.get(i)
           ~is i

  let v2 :: Vector = v.set(0, -1)
  check: v.get(0) ~is 0
         v2.get(0) ~is -1
         v.root.data[1] === v2.root.data[1] ~is #true

  let v  :: Vector = Vector.from(1..100)
  check: v.size ~is 99
         v.get(12) ~is 13

  check: v.set(99, -1)
         ~raises "out of bounds"

  let l :: List = List.iota(100)
  let v :: Vector = Vector.from(0..100)
  let idx = math.random(100)

  check: l.drop_right(100 - idx) ~is v.take(idx).to_list()
         l.drop_left(idx) ~is v.drop(idx).to_list()

  check: Vector.from(0 .. 3 * (33 ** 2) + 2).drop(12).take(10).to_list()
         ~is [12, 13, 14, 15, 16, 17, 18, 19, 20, 21]
           


  for (expt: 0 .. 5):
    def v = Vector.from(0 .. (MAX_WIDTH ** expt) + MAX_WIDTH)
    def extras = [#'a, #'b, #'c, #'d, #'e]
    def v2 = v.add_all(extras)
    
    // take
    check: v.take(0).to_list()
           ~is []
    check: v2.take(0).to_list()
           ~is []
    check: v.take(MAX_WIDTH).to_list()
           ~is List.iota(MAX_WIDTH)
    check: v2.take(MAX_WIDTH).to_list()
           ~is List.iota(MAX_WIDTH)
    check: v.take(v.size) === v
           ~is #true
    check: v2.take(v2.size) === v2
           ~is #true

    // drop
    check: v.drop(0) === v
           ~is #true
    check: v2.drop(0) === v2
           ~is #true
    check: v.drop(MAX_WIDTH).to_list()
           ~is Function.map(fun (i): i + MAX_WIDTH,
                            List.iota(v.size - MAX_WIDTH))
    check: v2.drop(MAX_WIDTH).to_list()
           ~is Function.map(fun (i): i + MAX_WIDTH,
                            List.iota(v.size - MAX_WIDTH))
                       .append(extras)
    check: v.drop(v.size).to_list()
           ~is []
    check: v2.drop(v2.size).to_list()
           ~is []
   
         