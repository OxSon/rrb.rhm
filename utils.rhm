#lang rhombus

export:
  ^
  Vec
  vec
  unsafe
  add_vec
  set_vec
  vec_take
  append_vec
  vec_drop
  vec_drop_right
  vec_split
  if_not
  

/* Array utilities for imitating COW immutable indexed sequences */

import rhombus/meta open

import lib("racket/base.rkt") as r:
  rename #{vector-immutable} as vec
  expose vec
  
import lib("racket/vector.rkt") as vector:
  rename:
    #{vector-drop} as vec_drop
    #{vector-drop-right} as vec_drop_right
    #{vector-split-at} as vec_split
    #{vector-take} as vec_take
    
  expose:
    vec_drop
    vec_drop_right
    vec_split
    vec_take

  
namespace unsafe: 
  import lib("racket/unsafe/ops.rkt") as unsafe:
    rename:
      #{unsafe-vector*->immutable-vector!} as freeze_vec

    expose:
      freeze_vec
      
  export freeze_vec
  
annot.macro 'Vec':
  annot_meta.pack_predicate('r.#{vector?} && r.#{immutable?}')


fun add_vec(v :: Vec, el) :: Vec:
  def ret = Array.make(v.length() + 1)
  Array.copy_from(ret, 0, v)
  ret[v.length()] := el
  unsafe.freeze_vec(ret)


fun set_vec(v :: Vec, idx :: NonnegInt, el) :: Vec:
  def ret = Array.copy(v)
  ret[idx] := el
  unsafe.freeze_vec(ret)  


fun append_vec(vec0, ...) :: Vec:
  unsafe.freeze_vec(vector.#{vector-append}(vec0, ...))

macro 'TODO $(msg :: String)':
  'error("TODO: " +& $msg)'

operator base ^ exp:
  ~stronger_than: * / + - <= >= == >> << and ..
  ~associativity: ~right
                  
  math.expt(base, exp)

macro 'if_not $condition ...:
         $do':
  'if !($condition ...)
   | $do
   | #void'
  
module test:  
  check:
    1 :: Vec
    ~raises ""

  check:
    Array(1, 2, 3) :: Vec
    ~raises ""

  check: set_vec(vec(1, 2, 3), 1, -1)
         ~is vec(1, -1, 3)


  check: vec(1, 2, 3)[0] := -1
         ~raises ""

  check: unsafe.freeze_vec(Array(1, 2, 3)) :: Vec
         ~is vec(1, 2, 3)

  check: add_vec(vec(1, 2, 3), 4)
         ~is vec(1, 2, 3, 4)

  check: append_vec(vec(1, 2, 3), vec(4, 5))
         ~is vec(1, 2, 3, 4, 5)

  check: append_vec(vec(#'a, #'b, #'c),
                    vec(1, 2, 3),
                    vec("the industrial revolution and its consequences..."))
         ~is vec(#'a, #'b, #'c,
                 1, 2, 3,
                 "the industrial revolution and its consequences...")

  check: TODO "foo"
         ~raises "foo"
         
  fun inv(x :: Int):
    if_not x == 0:
      1 / x
    
  check: inv(2)
         ~is 1/2 
    
  check: inv(0)
         ~is #void

  check: 2 ^ 3
         ~is 8

  check: 2 ^ 3 + 1 <= 100 / 10 - 1
         ~is #true