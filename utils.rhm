#lang rhombus/static/and_meta

export all_defined

fun filter(f, l):
    match l
    | []: []
    | List.cons(fst, rst):
        if f(fst)
        | filter(f, rst)
        | List.cons(fst, filter(f, rst))

fun id (x):
  x

module test:
  check: id({#'a: 1})
         ~is {#'a: 1}
         
  check: filter(fun (x): x mod 2 == 0,
                List.iota(10))
         ~is [1, 3, 5, 7, 9]

  check: filter(id,
                [])
         ~is []

  check: filter(fun (x): x > 0,
                [-1, -2, -3])
         ~is [-1, -2, -3]

  check: filter(fun (x): x > 0,
                [1, 2, 3])
         ~is []

macro 'TODO $(msg :: String)':
  'error("TODO: " +& $msg)'

macro 'if_not $condition ...:
         $do':
  'if !($condition ...)
   | $do
   | #void'
  
macro
| 'debug $with:
         $body':
    'try:
       $body
       ~catch exn:
         $with(exn)'
| 'debug ~rethrow $with:
       $body':
    'try:
       $body
       ~catch exn:
         $with(exn)
         throw exn'
    
module test:       
  check: TODO "foo"
         ~raises "foo"
         
  fun inv(x :~ Int) :~ maybe(Int):
    if_not x == 0:
      1 / x
    
  check: inv(2)
         ~is 1/2 
    
  check: inv(0)
         ~is #void

  check: debug println:
           1 / 0
         ~completes

  check: debug throw:
           1 / 0
         ~raises ""

  check: debug (fun (exn): exn):
           1 / 0
         ~completes

  check: debug (fun (exn :~ Exn): exn.message):
           1 / 0
         ~is "/: division by zero"

  check: 1 + debug (fun (exn :~ Exn): TODO "foo"):
           1 / 0
         ~raises "foo"

  check: 1 + debug (fun (exn :~ Exn): 2):
             1 / 0
         ~is 3
           
expr.macro 'docurry $f: $x ...':
  /*
  fun (_?, ...): dothing($cached_arg, _?, ...)
  */
  match '$f'
  | '($e)': 'docurry $e: $x ...'
  | 'fun (): $body': '(fun (_): $body)($x) ...'
  | 'fun ($a, $b, ...): $body': '(fun ($a): curry ($b, ...))($x) ...'
  | ~else: error(#'docurry, "noparse: " +& '$f')
           
// pipe
operator x |> f:
  ~associativity: ~left
  ~weaker_than: ~other
  f(x)

#//
operator f π x:
  ~associativity: ~left
  ~weaker_than: ~other
  f(x)
  //docurry f: x
  /*
  f curr x:
  ~associativity: ~left
  ~stronger_than: ~other
  (docurry f: x)*/


// compose
operator f … g:
  ~associativity: ~right
  ~weaker_than: #%call
  ~stronger_than: ~other
  (fun (x): f(g(x)))

// TODO curry an arbitrary $f that is a closure or fundef and be able to call it i.e. `(curry $f)(x)(y)(z)` would work
expr.macro 'curry ($x, ...) ...: $body':
  match '[$x, ...] ...'
  | '[]': '($body)'
  | '[$x, $y, ...]': '(fun ($x): (curry ($y, ...): $body))'

defn.macro 'curry $f($x, ...) ...: $body':
  match '[$x, ...] ...'
  | '[]': 'def $f = $body'
  | '[$x, $y, ...]': 'fun $f($x):
                        curry $f($y, ...):
                          $body
                        $f'
                      
fun add1(x): x + 1
fun mult2(x): x * 2


module test:
  check: (mult2 … add1)(3)
         ~is 8
  check: (mult2 … add1)(13)
         ~is 28

  check: (curry (x, y): x * y)(3)(7)
         ~is 21
         
  curry y(m, x, b):
    m * x + b
    
  check: y(3)(5)(1)
         ~is 16

  check: -13 |> mult2 |> add1 |> math.abs
         ~is 25

  check: -13 |> math.abs … add1 … mult2
         ~is 25

  curry add(x, y): x + y
  curry expt(b, a): b ** a
  check: 3 |> expt(2) |> add(-1)
         ~is 7